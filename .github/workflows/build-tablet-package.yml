name: Build Windows Tablet Package

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Target platform'
        required: true
        default: 'x64'
        type: choice
        options:
        - x64
        - ARM64
        - x86
      configuration:
        description: 'Build configuration'
        required: true
        default: 'Release'
        type: choice
        options:
        - Release
        - Debug

jobs:
  build-windows-tablet-package:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install react-native-windows
      run: npm install --save-dev react-native-windows@latest

    - name: Install RNW Windows Build Dependencies
      shell: powershell
      run: |
        Set-ExecutionPolicy Unrestricted -Scope Process -Force
        Invoke-WebRequest -UseBasicParsing -Uri 'https://aka.ms/rnw-vs2022-deps.ps1' -OutFile rnw-deps.ps1
        .\\rnw-deps.ps1 -Install -NoPrompt

    # Update the Platform Toolset for SQLitePlugin to v143 (Visual Studio 2022)
    - name: Update SQLitePlugin Platform Toolset
      shell: powershell
      run: |
        $projFile = "node_modules\\react-native-sqlite-storage\\platforms\\windows\\SQLitePlugin\\SQLitePlugin.vcxproj"
        if (Test-Path $projFile) {
          (Get-Content $projFile) -replace '<PlatformToolset>v140</PlatformToolset>','<PlatformToolset>v143</PlatformToolset>' -replace '<PlatformToolset>v141</PlatformToolset>','<PlatformToolset>v143</PlatformToolset>' | Set-Content $projFile
          Write-Host "Updated Platform Toolset in SQLitePlugin.vcxproj to v143"
        }

    # Update the Windows SDK version for SQLitePlugin
    - name: Update SQLite Windows SDK Version
      shell: powershell
      run: |
        $projFile = "node_modules\\react-native-sqlite-storage\\platforms\\windows\\SQLitePlugin\\SQLitePlugin.vcxproj"
        if (Test-Path $projFile) {
          (Get-Content $projFile) -replace '10.0.18362.0','10.0.19041.0' -replace '10.0.16299.0','10.0.19041.0' | Set-Content $projFile
          Write-Host "Updated SQLite Windows SDK version to 10.0.19041.0"
        }

    # Install CppWinRT NuGet Package Globally
    - name: Install CppWinRT NuGet Package Globally
      shell: powershell
      run: |
        nuget install Microsoft.Windows.CppWinRT -Version 2.0.230706.1 -OutputDirectory C:\\NuGetPackages
        Write-Host "Installed CppWinRT 2.0.230706.1 to C:\\NuGetPackages"

    - name: Update SQLitePlugin packages.config
      shell: powershell
      run: |
        $packagesConfig = "node_modules\\react-native-sqlite-storage\\platforms\\windows\\SQLitePlugin\\packages.config"
        if (Test-Path $packagesConfig) {
          (Get-Content $packagesConfig) -replace 'version="2.0.200615.7"', 'version="2.0.230706.1"' | Set-Content $packagesConfig
          Write-Host "Updated CppWinRT version in packages.config to 2.0.230706.1"
        }

    - name: Fix SQLitePlugin Project To Use Global Packages
      shell: powershell
      run: |
        $projFile = "node_modules\\react-native-sqlite-storage\\platforms\\windows\\SQLitePlugin\\SQLitePlugin.vcxproj"
        if (Test-Path $projFile) {
          $content = Get-Content $projFile
          $content = $content -replace '<Import Project="\$\(SolutionDir\)\\packages\\Microsoft\.Windows\.CppWinRT\.2\.0\.[0-9.]+\\build\\native\\Microsoft\.Windows\.CppWinRT\.props"', '<Import Project="C:/NuGetPackages/Microsoft.Windows.CppWinRT.2.0.230706.1/build/native/Microsoft.Windows.CppWinRT.props"'
          $content = $content -replace '<Import Project="\$\(SolutionDir\)\\packages\\Microsoft\.Windows\.CppWinRT\.2\.0\.[0-9.]+\\build\\native\\Microsoft\.Windows\.CppWinRT\.targets"', '<Import Project="C:/NuGetPackages/Microsoft.Windows.CppWinRT.2.0.230706.1/build/native/Microsoft.Windows.CppWinRT.targets"'
          $content = $content -replace '!Exists\(''\$\(SolutionDir\)\\packages\\Microsoft\.Windows\.CppWinRT\.2\.0\.[0-9.]+\\build\\native\\Microsoft\.Windows\.CppWinRT\.props''\)', '!Exists(''C:/NuGetPackages/Microsoft.Windows.CppWinRT.2.0.230706.1/build/native/Microsoft.Windows.CppWinRT.props'')'
          $content = $content -replace '!Exists\(''\$\(SolutionDir\)\\packages\\Microsoft\.Windows\.CppWinRT\.2\.0\.[0-9.]+\\build\\native\\Microsoft\.Windows\.CppWinRT\.targets''\)', '!Exists(''C:/NuGetPackages/Microsoft.Windows.CppWinRT.2.0.230706.1/build/native/Microsoft.Windows.CppWinRT.targets'')'
          Set-Content $projFile $content
          Write-Host "Updated SQLitePlugin.vcxproj to use global CppWinRT package path"
        }

    - name: Build Windows Package
      shell: powershell
      run: |        
        npx react-native run-windows --no-launch --no-deploy --release --bundle --arch ${{ github.event.inputs.platform }} --logging
        
    - name: Create Deployment Package
      shell: powershell
      run: |
        $deploymentDir = "loadmaster-windows-tablet-package"
        if (Test-Path $deploymentDir) {
          Remove-Item -Recurse -Force $deploymentDir
        }
        New-Item -ItemType Directory -Path $deploymentDir -Force
        
        # Copy package files
        $packageDir = "windows\AppPackages"
        if (Test-Path $packageDir) {
          Copy-Item -Recurse -Path "$packageDir\*" -Destination $deploymentDir
        }
        
        # Create installation script
        $installScript = @"
        @echo off
        echo Installing LoadMaster for Windows Tablet
        echo.
        
        REM Enable developer mode (required for sideloading)
        echo Enabling developer mode...
        reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /v AllowDevelopmentWithoutDevLicense /t REG_DWORD /d 1 /f
        
        REM Find and install the package
        for /r %%i in (*.appx *.msix *.appxbundle) do (
            echo Installing %%i...
            powershell -Command "Add-AppxPackage -Path '%%i'"
            if errorlevel 1 (
                echo Failed to install %%i
                pause
                exit /b 1
            )
        )
        
        echo.
        echo Installation completed successfully!
        echo You can now find LoadMaster in your Start Menu.
        pause
        "@
        
        Set-Content -Path "$deploymentDir\install.bat" -Value $installScript
        
        # Create PowerShell installation script
        $psInstallScript = @"
        # LoadMaster Windows Tablet Installation Script
        Write-Host "Installing LoadMaster for Windows Tablet" -ForegroundColor Green
        
        # Enable developer mode
        Write-Host "Enabling developer mode..." -ForegroundColor Yellow
        try {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" -Name "AllowDevelopmentWithoutDevLicense" -Value 1 -Type DWord -Force
            Write-Host "Developer mode enabled" -ForegroundColor Green
        } catch {
            Write-Warning "Could not enable developer mode. You may need to enable it manually in Windows Settings."
        }
        
        # Install the package
        Write-Host "Installing LoadMaster package..." -ForegroundColor Yellow
        Get-ChildItem -Recurse -Include "*.appx", "*.msix", "*.appxbundle" | ForEach-Object {
            Write-Host "Installing `$(`$_.Name)..." -ForegroundColor Cyan
            try {
                Add-AppxPackage -Path `$_.FullName
                Write-Host "Successfully installed `$(`$_.Name)" -ForegroundColor Green
            } catch {
                Write-Error "Failed to install `$(`$_.Name): `$(`$_.Exception.Message)"
            }
        }
        
        Write-Host "Installation completed!" -ForegroundColor Green
        Write-Host "You can now find LoadMaster in your Start Menu." -ForegroundColor Cyan
        Read-Host "Press Enter to exit"
        "@
        
        Set-Content -Path "$deploymentDir\install.ps1" -Value $psInstallScript
        
        # Create README
        $readmeContent = @"
        # LoadMaster Windows Tablet Deployment Package
        
        This package contains everything needed to install LoadMaster on a Windows tablet without internet connection.
        
        ## Installation Instructions
        
        ### Method 1: Using Batch Script (Recommended)
        1. Right-click on ``install.bat`` and select "Run as administrator"
        2. Follow the prompts
        
        ### Method 2: Using PowerShell Script
        1. Right-click on PowerShell and select "Run as administrator"
        2. Navigate to this folder
        3. Run: ``Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser``
        4. Run: ``.\install.ps1``
        
        ### Method 3: Manual Installation
        1. Enable Developer Mode in Windows Settings
        2. Double-click on the .appx, .msix, or .appxbundle file
        3. Click "Install"
        
        ## Requirements
        - Windows 10 version 1903 or later
        - ${{ github.event.inputs.platform }} architecture
        - Developer mode enabled
        
        Built on: $(Get-Date)
        Platform: ${{ github.event.inputs.platform }}
        Configuration: ${{ github.event.inputs.configuration }}
        "@
        
        Set-Content -Path "$deploymentDir\README.md" -Value $readmeContent
        
        Write-Host "Deployment package created successfully!" -ForegroundColor Green

    - name: Upload Windows Tablet Package
      uses: actions/upload-artifact@v4
      with:
        name: loadmaster-windows-tablet-package-${{ github.event.inputs.platform }}-${{ github.event.inputs.configuration }}
        path: loadmaster-windows-tablet-package/
        retention-days: 30 