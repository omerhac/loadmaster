name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test-ios:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Cache CocoaPods
      uses: actions/cache@v3
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
      
    - name: Cache Xcode build
      uses: actions/cache@v3
      with:
        path: ios/build
        key: ${{ runner.os }}-xcode-build-${{ hashFiles('ios/**/*.pbxproj') }}-${{ hashFiles('ios/**/*.swift') }}-${{ hashFiles('ios/**/*.m') }}
        restore-keys: |
          ${{ runner.os }}-xcode-build-
          ${{ runner.os }}-xcode-build-${{ hashFiles('ios/**/*.pbxproj') }}-${{ hashFiles('ios/**/*.swift') }}
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Install Pod dependencies
      run: |
        cd ios
        pod install
  
    # Build for iPad with landscape orientation
    - name: Build iOS for iPad
      run: |
        xcodebuild -workspace ios/loadmaster.xcworkspace -scheme loadmaster -configuration Release -destination 'platform=iOS Simulator,name=iPad (10th generation)' -derivedDataPath ios/build
    
    - name: Upload iOS build artifact
      uses: actions/upload-artifact@main
      with:
        name: ios-ipad-build
        path: ios/build/Build/Products/Release-iphonesimulator/*.app
        
  build-and-test-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Cache Windows build
      uses: actions/cache@v3
      with:
        path: windows/build
        key: ${{ runner.os }}-windows-build-${{ hashFiles('windows/**/*.sln') }}-${{ hashFiles('windows/**/*.cs') }}-${{ hashFiles('windows/**/*.cpp') }}
        restore-keys: |
          ${{ runner.os }}-windows-build-
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Install react-native-windows
      run: npm install --save-dev react-native-windows@latest
      
    # Build for Windows tablets
    - name: Build Windows
      run: |
        # List installed Windows SDK versions
        Get-ChildItem "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Kits\Installed Roots"
        
        # Check available SDKs in the directory
        Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\Include" -ErrorAction SilentlyContinue
        
        # Use rnw-dependencies script to install required components
        Start-Process powershell.exe -ArgumentList "-ExecutionPolicy Bypass", "-File D:\a\loadmaster\loadmaster\node_modules\react-native-windows\scripts\rnw-dependencies.ps1 -NoPrompt" -Wait
        
        # Update SQLitePlugin project SDK version
        $sqliteProjectPath = "node_modules/react-native-sqlite-storage/platforms/windows/SQLitePlugin/SQLitePlugin.vcxproj"
        if (Test-Path $sqliteProjectPath) {
          Write-Host "Found SQLitePlugin.vcxproj, updating Windows SDK version..."
          
          # Read the file content
          $content = Get-Content $sqliteProjectPath
          Write-Host "Original content contains WindowsTargetPlatformVersion:" -ForegroundColor Yellow
          $content | Select-String "WindowsTargetPlatformVersion" 
          
          # Replace all occurrences of any Windows SDK version with 10.0.19041.0
          $content = $content -replace '<WindowsTargetPlatformVersion>[0-9\.]+</WindowsTargetPlatformVersion>', '<WindowsTargetPlatformVersion>10.0.19041.0</WindowsTargetPlatformVersion>'
          $content = $content -replace '<TargetPlatformMinVersion>[0-9\.]+</TargetPlatformMinVersion>', '<TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>'
          
          # Save the updated content
          $content | Set-Content $sqliteProjectPath
          
          # Verify the changes
          Write-Host "Updated content contains WindowsTargetPlatformVersion:" -ForegroundColor Green
          Get-Content $sqliteProjectPath | Select-String "WindowsTargetPlatformVersion"
          Get-Content $sqliteProjectPath | Select-String "TargetPlatformMinVersion"
        }
        
        npx react-native run-windows --no-launch --no-deploy --release
        
    - name: Upload Windows build artifact
      uses: actions/upload-artifact@main
      with:
        name: windows-tablet-build
        path: windows/loadmaster/AppPackages/**/*