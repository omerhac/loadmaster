name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test-ios:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
      
    - name: Cache CocoaPods
      uses: actions/cache@v3
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
      
    - name: Cache Xcode build
      uses: actions/cache@v3
      with:
        path: ios/build
        key: ${{ runner.os }}-xcode-build-${{ hashFiles('ios/**/*.pbxproj') }}-${{ hashFiles('ios/**/*.swift') }}-${{ hashFiles('ios/**/*.m') }}
        restore-keys: |
          ${{ runner.os }}-xcode-build-
          ${{ runner.os }}-xcode-build-${{ hashFiles('ios/**/*.pbxproj') }}-${{ hashFiles('ios/**/*.swift') }}
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Install Pod dependencies
      run: |
        cd ios
        pod install
  
    # Build for iPad with landscape orientation
    - name: Build iOS for iPad
      run: |
        xcodebuild -workspace ios/loadmaster.xcworkspace -scheme loadmaster -configuration Release -destination 'platform=iOS Simulator,name=iPad (10th generation)' -derivedDataPath ios/build
    
    - name: Upload iOS build artifact
      uses: actions/upload-artifact@main
      with:
        name: ios-ipad-build
        path: ios/build/Build/Products/Release-iphonesimulator/*.app
        
  build-and-test-windows:
    runs-on: windows-latest
    environment: loadmaster
    env:
      LOADMASTER_ENCODED_CERTIFICATE: ${{ secrets.LOADMASTER_ENCODED_CERTIFICATE }}
      LOADMASTER_CERTIFICATE_PASSWORD: ${{ secrets.LOADMASTER_CERTIFICATE_PASSWORD }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "LOADMASTER_ENCODED_CERTIFICATE: $env:LOADMASTER_ENCODED_CERTIFICATE"
        echo "LOADMASTER_CERTIFICATE_PASSWORD: $env:LOADMASTER_CERTIFICATE_PASSWORD"
        npm ci
      
    - name: Install RNW Windows Build Dependencies
      shell: powershell
      run: |
        Set-ExecutionPolicy Unrestricted -Scope Process -Force
        Invoke-WebRequest -UseBasicParsing -Uri 'https://aka.ms/rnw-vs2022-deps.ps1' -OutFile rnw-deps.ps1
        .\\rnw-deps.ps1 -Install -NoPrompt

    - name: Cache Windows build
      uses: actions/cache@v3
      with:
        path: windows/build
        key: ${{ runner.os }}-windows-build-${{ hashFiles('windows/**/*.sln') }}-${{ hashFiles('windows/**/*.cs') }}-${{ hashFiles('windows/**/*.cpp') }}
        restore-keys: |
          ${{ runner.os }}-windows-build-
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Install react-native-windows
      run: npm install --save-dev react-native-windows@latest

    # Update the Platform Toolset for SQLitePlugin to v143 (Visual Studio 2022)
    - name: Update SQLitePlugin Platform Toolset
      shell: powershell
      run: |
        $projFile = "node_modules\\react-native-sqlite-storage\\platforms\\windows\\SQLitePlugin\\SQLitePlugin.vcxproj"
        if (Test-Path $projFile) {
          (Get-Content $projFile) -replace '<PlatformToolset>v140</PlatformToolset>','<PlatformToolset>v143</PlatformToolset>' -replace '<PlatformToolset>v141</PlatformToolset>','<PlatformToolset>v143</PlatformToolset>' | Set-Content $projFile
          Write-Host "Updated Platform Toolset in SQLitePlugin.vcxproj to v143"
        } else {
          Write-Error "SQLitePlugin.vcxproj not found at expected path"
          exit 1
        }

    # Update the Windows SDK version for SQLitePlugin to one available in the CI environment
    - name: Update SQLite Windows SDK Version
      shell: powershell
      run: |
        $projFile = "node_modules\\react-native-sqlite-storage\\platforms\\windows\\SQLitePlugin\\SQLitePlugin.vcxproj"
        if (Test-Path $projFile) {
          (Get-Content $projFile) -replace '10.0.18362.0','10.0.19041.0' -replace '10.0.16299.0','10.0.19041.0' | Set-Content $projFile
          Write-Host "Updated SQLite Windows SDK version in SQLitePlugin.vcxproj to 10.0.19041.0"
        } else {
          Write-Error "SQLitePlugin.vcxproj not found at expected path"
          exit 1
        }

    # Install CppWinRT NuGet Package Globally
    # This is a workaround to fix the build error:
    # The "CppWinRT.props" file cannot be found.
    # The "CppWinRT.targets" file cannot be found.
    # The "CppWinRT.props" file cannot be found.
    # It was caused by react-native-sqlite-storage not being able to find the CppWinRT package.
    # The fix is to install the CppWinRT NuGet package globally and then update the SQLitePlugin project file to use the global path.
    - name: Install CppWinRT NuGet Package Globally
      shell: powershell
      run: |
        nuget install Microsoft.Windows.CppWinRT -Version 2.0.230706.1 -OutputDirectory C:\\NuGetPackages
        Write-Host "Installed CppWinRT 2.0.230706.1 to C:\\NuGetPackages"
        Write-Host "Contents of C:\\NuGetPackages:"
        Get-ChildItem -Path "C:\\NuGetPackages" -Recurse | Where-Object { $_.FullName -like "*CppWinRT*" } | ForEach-Object { Write-Host $_.FullName }

    - name: Update SQLitePlugin packages.config
      shell: powershell
      run: |
        $packagesConfig = "node_modules\\react-native-sqlite-storage\\platforms\\windows\\SQLitePlugin\\packages.config"
        if (Test-Path $packagesConfig) {
          # Update CppWinRT version to match what's being installed
          (Get-Content $packagesConfig) -replace 'version="2.0.200615.7"', 'version="2.0.230706.1"' | Set-Content $packagesConfig
          Write-Host "Updated CppWinRT version in packages.config to 2.0.230706.1"
          Write-Host "Contents of packages.config:"
          Get-Content $packagesConfig
        } else {
          Write-Error "packages.config not found at expected path"
          exit 1
        }

    - name: Fix SQLitePlugin Project To Use Global Packages
      shell: powershell
      run: |
        $projFile = "node_modules\\react-native-sqlite-storage\\platforms\\windows\\SQLitePlugin\\SQLitePlugin.vcxproj"
        if (Test-Path $projFile) {
          # Update the package reference to use the global path with forward slashes
          $content = Get-Content $projFile
          # 1. Update the props import
          $content = $content -replace '<Import Project="\$\(SolutionDir\)\\packages\\Microsoft\.Windows\.CppWinRT\.2\.0\.[0-9.]+\\build\\native\\Microsoft\.Windows\.CppWinRT\.props"', '<Import Project="C:/NuGetPackages/Microsoft.Windows.CppWinRT.2.0.230706.1/build/native/Microsoft.Windows.CppWinRT.props"'
          # 2. Update the targets import
          $content = $content -replace '<Import Project="\$\(SolutionDir\)\\packages\\Microsoft\.Windows\.CppWinRT\.2\.0\.[0-9.]+\\build\\native\\Microsoft\.Windows\.CppWinRT\.targets"', '<Import Project="C:/NuGetPackages/Microsoft.Windows.CppWinRT.2.0.230706.1/build/native/Microsoft.Windows.CppWinRT.targets"'
          # 3. Update the error conditions
          $content = $content -replace '!Exists\(''\$\(SolutionDir\)\\packages\\Microsoft\.Windows\.CppWinRT\.2\.0\.[0-9.]+\\build\\native\\Microsoft\.Windows\.CppWinRT\.props''\)', '!Exists(''C:/NuGetPackages/Microsoft.Windows.CppWinRT.2.0.230706.1/build/native/Microsoft.Windows.CppWinRT.props'')'
          $content = $content -replace '!Exists\(''\$\(SolutionDir\)\\packages\\Microsoft\.Windows\.CppWinRT\.2\.0\.[0-9.]+\\build\\native\\Microsoft\.Windows\.CppWinRT\.targets''\)', '!Exists(''C:/NuGetPackages/Microsoft.Windows.CppWinRT.2.0.230706.1/build/native/Microsoft.Windows.CppWinRT.targets'')'
          # 4. Update error messages
          $content = $content -replace '\$\(\[System\.String\]::Format\(''\$\(ErrorText\)'', ''\$\(SolutionDir\)\\packages\\Microsoft\.Windows\.CppWinRT\.2\.0\.[0-9.]+\\build\\native\\Microsoft\.Windows\.CppWinRT\.props''\)\)', '$([System.String]::Format(''$(ErrorText)'', ''C:/NuGetPackages/Microsoft.Windows.CppWinRT.2.0.230706.1/build/native/Microsoft.Windows.CppWinRT.props''))'
          $content = $content -replace '\$\(\[System\.String\]::Format\(''\$\(ErrorText\)'', ''\$\(SolutionDir\)\\packages\\Microsoft\.Windows\.CppWinRT\.2\.0\.[0-9.]+\\build\\native\\Microsoft\.Windows\.CppWinRT\.targets''\)\)', '$([System.String]::Format(''$(ErrorText)'', ''C:/NuGetPackages/Microsoft.Windows.CppWinRT.2.0.230706.1/build/native/Microsoft.Windows.CppWinRT.targets''))'
          Set-Content $projFile $content
          Write-Host "Updated SQLitePlugin.vcxproj to use global CppWinRT package path"
          Write-Host "Checking for C:/NuGetPackages/Microsoft.Windows.CppWinRT.2.0.230706.1/build/native/Microsoft.Windows.CppWinRT.props"
          if (Test-Path "C:/NuGetPackages/Microsoft.Windows.CppWinRT.2.0.230706.1/build/native/Microsoft.Windows.CppWinRT.props") {
            Write-Host "FOUND: CppWinRT.props exists"
          } else {
            Write-Host "MISSING: CppWinRT.props not found"
          }
        } else {
          Write-Error "SQLitePlugin.vcxproj not found at expected path"
          exit 1
        }

    - name: Build Windows
      run: |        
         npm run windows:build-signed
        
    # List contents of relevant directories to find build artifacts
    - name: List build output directories
      shell: powershell
      run: |
        Write-Host "Listing contents of windows\x64\Release\"
        dir windows\x64\Release -Recurse

    - name: Upload Windows build artifact
      uses: actions/upload-artifact@main
      with:
        name: windows-msix-package
        path: windows/AppPackages/

